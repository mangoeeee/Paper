From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jake Potrebic <jake.m.potrebic@gmail.com>
Date: Wed, 15 Nov 2023 20:56:15 -0800
Subject: [PATCH] Add demo lifecycle events


diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/DummyResourceRegistrarImpl.java b/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/DummyResourceRegistrarImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..cc7969463a295f7eb6f453786177908c09656631
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/DummyResourceRegistrarImpl.java
@@ -0,0 +1,15 @@
+package io.papermc.paper.plugin.lifecycle.dummy;
+
+import io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner;
+import io.papermc.paper.plugin.lifecycle.event.registrar.PaperRegistrar;
+import org.checkerframework.checker.nullness.qual.Nullable;
+
+public class DummyResourceRegistrarImpl implements DummyResourceRegistrar, PaperRegistrar<LifecycleEventOwner> {
+
+    private @Nullable LifecycleEventOwner context;
+
+    @Override
+    public void setCurrentContext(final @Nullable LifecycleEventOwner owner) {
+        this.context = owner;
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/NonRegistrarEventImpl.java b/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/NonRegistrarEventImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..f7649997fb218a177cd14a66db50c732140a0dc9
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/NonRegistrarEventImpl.java
@@ -0,0 +1,28 @@
+package io.papermc.paper.plugin.lifecycle.dummy;
+
+import io.papermc.paper.plugin.bootstrap.BootstrapContext;
+import io.papermc.paper.plugin.lifecycle.event.LifecycleEventOwner;
+import io.papermc.paper.plugin.lifecycle.event.types.OwnerAwareLifecycleEvent;
+import org.checkerframework.checker.nullness.qual.NonNull;
+import org.checkerframework.checker.nullness.qual.Nullable;
+import org.checkerframework.framework.qual.DefaultQualifier;
+
+@DefaultQualifier(NonNull.class)
+public final class NonRegistrarEventImpl implements NonRegistrarEvent, OwnerAwareLifecycleEvent<BootstrapContext> {
+
+    private @Nullable BootstrapContext currentContext;
+
+    @Override
+    public void setOwner(final @Nullable BootstrapContext owner) {
+        this.currentContext = owner;
+    }
+
+    @Override
+    public BootstrapContext castOwner(final LifecycleEventOwner owner) {
+        return owner instanceof final BootstrapContext context ? context : null;
+    }
+
+    public void someNonRegistrarRelatedThing() {
+        System.out.println("non registrar event");
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/RegisterAnywhereEventImpl.java b/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/RegisterAnywhereEventImpl.java
new file mode 100644
index 0000000000000000000000000000000000000000..dc6e5f22a2f408bfc3a48e5ef55852ff8d863597
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/lifecycle/dummy/RegisterAnywhereEventImpl.java
@@ -0,0 +1,6 @@
+package io.papermc.paper.plugin.lifecycle.dummy;
+
+import io.papermc.paper.plugin.lifecycle.event.types.LifecycleEvent;
+
+public record RegisterAnywhereEventImpl() implements LifecycleEvent {
+}
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 7573c12a77797146c51ef2dfe4b2a636df45e21a..108dfde49915c5c72cab88212b3ed4dbc3874b64 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -135,6 +135,9 @@ public class Main {
             Path path1 = Paths.get("server.properties");
             DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
 
+            io.papermc.paper.plugin.lifecycle.event.LifecycleEventRunner.INSTANCE.callReloadableRegistrarEvent(io.papermc.paper.plugin.lifecycle.event.types.LifecycleEvents.DUMMY,new io.papermc.paper.plugin.lifecycle.dummy.DummyResourceRegistrarImpl(), io.papermc.paper.plugin.bootstrap.BootstrapContext.class, io.papermc.paper.plugin.lifecycle.event.registrar.ReloadableRegistrarEvent.Cause.INITIAL); // Paper
+            io.papermc.paper.plugin.lifecycle.event.LifecycleEventRunner.INSTANCE.callEvent(io.papermc.paper.plugin.lifecycle.event.types.LifecycleEvents.NON_REGISTRAR_RELATED_EVENT, new io.papermc.paper.plugin.lifecycle.dummy.NonRegistrarEventImpl()); // Paper
+
             dedicatedserversettings.forceSave();
             Path path2 = Paths.get("eula.txt");
             Eula eula = new Eula(path2);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 34f19ac897a30c0c4e3ab406013fcca1c8b7db93..a5cba4c9d4ee6e79ae4e7ee2dcf9e03ccd8ca196 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -672,6 +672,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         this.server.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.STARTUP));
+        io.papermc.paper.plugin.lifecycle.event.LifecycleEventRunner.INSTANCE.callStaticRegistrarEvent(io.papermc.paper.plugin.lifecycle.event.types.LifecycleEvents.DUMMY_STATIC, new io.papermc.paper.plugin.lifecycle.dummy.DummyResourceRegistrarImpl(), org.bukkit.plugin.Plugin.class); // Paper
         this.connection.acceptConnections();
     }
 
@@ -2265,6 +2266,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             this.functionManager.replaceLibrary(this.resources.managers.getFunctionLibrary());
             this.structureTemplateManager.onResourceManagerReload(this.resources.resourceManager);
             org.bukkit.craftbukkit.block.data.CraftBlockData.reloadCache(); // Paper - cache block data strings, they can be defined by datapacks so refresh it here
+            io.papermc.paper.plugin.lifecycle.event.LifecycleEventRunner.INSTANCE.callReloadableRegistrarEvent(io.papermc.paper.plugin.lifecycle.event.types.LifecycleEvents.DUMMY,new io.papermc.paper.plugin.lifecycle.dummy.DummyResourceRegistrarImpl(), io.papermc.paper.plugin.bootstrap.BootstrapContext.class, io.papermc.paper.plugin.lifecycle.event.registrar.ReloadableRegistrarEvent.Cause.RELOAD); // Paper
             new io.papermc.paper.event.server.ServerResourcesReloadedEvent(cause).callEvent(); // Paper - fire after everything has been reloaded
         }, this);
 
